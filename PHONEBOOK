class TelephoneBook:
    def __init__(self, name, tel_no):
        self.name = name
        self.tel_no = tel_no

def Insertion_QuadProbing():
    hashtable = [None for _ in range(10)]
    num_records = int(input("\nEnter number of records : "))
    for _ in range(num_records):
        n = input("Enter name : ")
        t = int(input("Enter telephone no. : "))
        hashValue = t % 10
        j = 1
        while hashtable[hashValue] is not None:
            hashValue = (hashValue + (j * j)) % 10
            j += 1
        hashtable[hashValue] = TelephoneBook(n, t)
    return hashtable

def Insertion_DoubleHashing():
    hashtable = [None for _ in range(10)]
    num_records = int(input("\nEnter number of records : "))
    for _ in range(num_records):
        n = input("Enter name : ")
        t = int(input("Enter telephone no. : "))
        hashValue = t % 9 + 7 - (t % 7)
        j = 1
        while hashtable[hashValue] is not None:
            hashValue = (hashValue + j * (7 - (t % 7))) % 10
            j += 1
        hashtable[hashValue] = TelephoneBook(n, t)
    return hashtable

def Insertion_LinearProbing():
    hashtable = [None for _ in range(10)]
    num_records = int(input("\nEnter number of records : "))
    for _ in range(num_records):
        n = input("Enter name : ")
        t = int(input("Enter telephone no. : "))
        hashValue = t % 10
        while hashtable[hashValue] is not None:
            hashValue = (hashValue + 1) % 10  # Linear probing
        hashtable[hashValue] = TelephoneBook(n, t)
    return hashtable

def Display_QP(hash_table):
    print("-------------------------------")
    print("Index\tName\tTelephone No.")
    print("-------------------------------")
    for index, obj in enumerate(hash_table):
        if obj is None:
            print(index, "\t-\t-")
        else:
            print(index, "\t", obj.name, "\t", obj.tel_no)
    print("-------------------------------")

def Display_DH(hash_table):
    print("-------------------------------")
    print("Index\tName\tTelephone No.")
    print("-------------------------------")
    for index, obj in enumerate(hash_table):
        if obj is None:
            print(index, "\t-\t-")
        else:
            print(index, "\t", obj.name, "\t", obj.tel_no)
    print("-------------------------------")

def Display_LP(hash_table):
    print("-------------------------------")
    print("Index\tName\tTelephone No.")
    print("-------------------------------")
    for index, obj in enumerate(hash_table):
        if obj is None:
            print(index, "\t-\t-")
        else:
            print(index, "\t", obj.name, "\t", obj.tel_no)
    print("-------------------------------")

def Search(hash_table):
    n = input("Enter name to search: ")
    found = False
    for index, obj in enumerate(hash_table):
        if obj is not None and obj.name == n:
            print("\nFound at index", index)
            print("-------------------------------")
            print("Index\tName\tTelephone No.")
            print("-------------------------------")
            print(index, "\t", obj.name, "\t", obj.tel_no)
            print("-------------------------------")
            found = True

    if not found:
        print("\nNot found !!!\n")

def main():
    hash_table = [None for _ in range(10)]
    while True:
        print("\t1.Insert Value")
        print("\t2.Display")
        print("\t3.Search")
        print("\t4.Exit")
        ch = int(input("Enter choice : "))
        if ch == 1:
            print("\nSelect collision method-")
            print("\t1.Quadratic Probing")
            print("\t2.Double Hashing")
            print("\t3.Linear Probing")
            c = int(input("Enter choice : "))
            if c == 1:
                hash_table = Insertion_QuadProbing()
            elif c == 2:
                hash_table = Insertion_DoubleHashing()
            elif c == 3:
                hash_table = Insertion_LinearProbing()
        elif ch == 2:
            if c == 1:
                Display_QP(hash_table)
            elif c == 2:
                Display_DH(hash_table)
            elif c == 3:
                Display_LP(hash_table)
        elif ch == 3:
            Search(hash_table)
        elif ch == 4:
            quit()
        else:
            print("! Enter valid choice.")

main()
